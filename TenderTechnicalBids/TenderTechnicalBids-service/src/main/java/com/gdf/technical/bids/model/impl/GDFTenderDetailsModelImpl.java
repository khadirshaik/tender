/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.gdf.technical.bids.model.impl;

import com.gdf.technical.bids.model.GDFTenderDetails;
import com.gdf.technical.bids.model.GDFTenderDetailsModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the GDFTenderDetails service. Represents a row in the &quot;PRT_GDF_Tender_Details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>GDFTenderDetailsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GDFTenderDetailsImpl}.
 * </p>
 *
 * @author KS61374
 * @see GDFTenderDetailsImpl
 * @generated
 */
public class GDFTenderDetailsModelImpl
	extends BaseModelImpl<GDFTenderDetails> implements GDFTenderDetailsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a gdf tender details model instance should use the <code>GDFTenderDetails</code> interface instead.
	 */
	public static final String TABLE_NAME = "PRT_GDF_Tender_Details";

	public static final Object[][] TABLE_COLUMNS = {
		{"GDF_Tender_Ref_Id", Types.BIGINT},
		{"Product_Category", Types.VARCHAR},
		{"GDF_Tender_Reference_Number", Types.VARCHAR},
		{"title", Types.VARCHAR}, {"Date_Of_Publication", Types.TIMESTAMP},
		{"Deadline_For_Tech_Bids_Sub", Types.TIMESTAMP},
		{"Method", Types.VARCHAR}, {"Status", Types.VARCHAR},
		{"deadlineTimeForTechBidsSub", Types.TIMESTAMP},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("GDF_Tender_Ref_Id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("Product_Category", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("GDF_Tender_Reference_Number", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Date_Of_Publication", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("Deadline_For_Tech_Bids_Sub", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("Method", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("deadlineTimeForTechBidsSub", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table PRT_GDF_Tender_Details (GDF_Tender_Ref_Id LONG not null primary key IDENTITY,Product_Category VARCHAR(100) null,GDF_Tender_Reference_Number VARCHAR(100) null,title VARCHAR(100) null,Date_Of_Publication DATE null,Deadline_For_Tech_Bids_Sub DATE null,Method VARCHAR(100) null,Status VARCHAR(100) null,deadlineTimeForTechBidsSub DATE null,userId LONG,userName VARCHAR(100) null,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table PRT_GDF_Tender_Details";

	public static final String ORDER_BY_JPQL =
		" ORDER BY gdfTenderDetails.modifiedDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY PRT_GDF_Tender_Details.modifiedDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long TENDERREFERENCENUMBER_COLUMN_BITMASK = 1L;

	public static final long USERID_COLUMN_BITMASK = 2L;

	public static final long MODIFIEDDATE_COLUMN_BITMASK = 4L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public GDFTenderDetailsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _tenderRefID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTenderRefID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _tenderRefID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GDFTenderDetails.class;
	}

	@Override
	public String getModelClassName() {
		return GDFTenderDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<GDFTenderDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<GDFTenderDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<GDFTenderDetails, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((GDFTenderDetails)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<GDFTenderDetails, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<GDFTenderDetails, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(GDFTenderDetails)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<GDFTenderDetails, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<GDFTenderDetails, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, GDFTenderDetails>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			GDFTenderDetails.class.getClassLoader(), GDFTenderDetails.class,
			ModelWrapper.class);

		try {
			Constructor<GDFTenderDetails> constructor =
				(Constructor<GDFTenderDetails>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<GDFTenderDetails, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<GDFTenderDetails, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<GDFTenderDetails, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<GDFTenderDetails, Object>>();
		Map<String, BiConsumer<GDFTenderDetails, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<GDFTenderDetails, ?>>();

		attributeGetterFunctions.put(
			"tenderRefID", GDFTenderDetails::getTenderRefID);
		attributeSetterBiConsumers.put(
			"tenderRefID",
			(BiConsumer<GDFTenderDetails, Long>)
				GDFTenderDetails::setTenderRefID);
		attributeGetterFunctions.put(
			"productCategory", GDFTenderDetails::getProductCategory);
		attributeSetterBiConsumers.put(
			"productCategory",
			(BiConsumer<GDFTenderDetails, String>)
				GDFTenderDetails::setProductCategory);
		attributeGetterFunctions.put(
			"tenderReferenceNumber",
			GDFTenderDetails::getTenderReferenceNumber);
		attributeSetterBiConsumers.put(
			"tenderReferenceNumber",
			(BiConsumer<GDFTenderDetails, String>)
				GDFTenderDetails::setTenderReferenceNumber);
		attributeGetterFunctions.put("title", GDFTenderDetails::getTitle);
		attributeSetterBiConsumers.put(
			"title",
			(BiConsumer<GDFTenderDetails, String>)GDFTenderDetails::setTitle);
		attributeGetterFunctions.put(
			"publicationDate", GDFTenderDetails::getPublicationDate);
		attributeSetterBiConsumers.put(
			"publicationDate",
			(BiConsumer<GDFTenderDetails, Date>)
				GDFTenderDetails::setPublicationDate);
		attributeGetterFunctions.put(
			"deadlineForTechBidsSub",
			GDFTenderDetails::getDeadlineForTechBidsSub);
		attributeSetterBiConsumers.put(
			"deadlineForTechBidsSub",
			(BiConsumer<GDFTenderDetails, Date>)
				GDFTenderDetails::setDeadlineForTechBidsSub);
		attributeGetterFunctions.put("method", GDFTenderDetails::getMethod);
		attributeSetterBiConsumers.put(
			"method",
			(BiConsumer<GDFTenderDetails, String>)GDFTenderDetails::setMethod);
		attributeGetterFunctions.put(
			"tenderStatus", GDFTenderDetails::getTenderStatus);
		attributeSetterBiConsumers.put(
			"tenderStatus",
			(BiConsumer<GDFTenderDetails, String>)
				GDFTenderDetails::setTenderStatus);
		attributeGetterFunctions.put(
			"deadlineTimeForTechBidsSub",
			GDFTenderDetails::getDeadlineTimeForTechBidsSub);
		attributeSetterBiConsumers.put(
			"deadlineTimeForTechBidsSub",
			(BiConsumer<GDFTenderDetails, Date>)
				GDFTenderDetails::setDeadlineTimeForTechBidsSub);
		attributeGetterFunctions.put("userId", GDFTenderDetails::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<GDFTenderDetails, Long>)GDFTenderDetails::setUserId);
		attributeGetterFunctions.put("userName", GDFTenderDetails::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<GDFTenderDetails, String>)
				GDFTenderDetails::setUserName);
		attributeGetterFunctions.put(
			"createDate", GDFTenderDetails::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<GDFTenderDetails, Date>)
				GDFTenderDetails::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", GDFTenderDetails::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<GDFTenderDetails, Date>)
				GDFTenderDetails::setModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getTenderRefID() {
		return _tenderRefID;
	}

	@Override
	public void setTenderRefID(long tenderRefID) {
		_tenderRefID = tenderRefID;
	}

	@Override
	public String getProductCategory() {
		if (_productCategory == null) {
			return "";
		}
		else {
			return _productCategory;
		}
	}

	@Override
	public void setProductCategory(String productCategory) {
		_productCategory = productCategory;
	}

	@Override
	public String getTenderReferenceNumber() {
		if (_tenderReferenceNumber == null) {
			return "";
		}
		else {
			return _tenderReferenceNumber;
		}
	}

	@Override
	public void setTenderReferenceNumber(String tenderReferenceNumber) {
		_columnBitmask |= TENDERREFERENCENUMBER_COLUMN_BITMASK;

		if (_originalTenderReferenceNumber == null) {
			_originalTenderReferenceNumber = _tenderReferenceNumber;
		}

		_tenderReferenceNumber = tenderReferenceNumber;
	}

	public String getOriginalTenderReferenceNumber() {
		return GetterUtil.getString(_originalTenderReferenceNumber);
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public Date getPublicationDate() {
		return _publicationDate;
	}

	@Override
	public void setPublicationDate(Date publicationDate) {
		_publicationDate = publicationDate;
	}

	@Override
	public Date getDeadlineForTechBidsSub() {
		return _deadlineForTechBidsSub;
	}

	@Override
	public void setDeadlineForTechBidsSub(Date deadlineForTechBidsSub) {
		_deadlineForTechBidsSub = deadlineForTechBidsSub;
	}

	@Override
	public String getMethod() {
		if (_method == null) {
			return "";
		}
		else {
			return _method;
		}
	}

	@Override
	public void setMethod(String method) {
		_method = method;
	}

	@Override
	public String getTenderStatus() {
		if (_tenderStatus == null) {
			return "";
		}
		else {
			return _tenderStatus;
		}
	}

	@Override
	public void setTenderStatus(String tenderStatus) {
		_tenderStatus = tenderStatus;
	}

	@Override
	public Date getDeadlineTimeForTechBidsSub() {
		return _deadlineTimeForTechBidsSub;
	}

	@Override
	public void setDeadlineTimeForTechBidsSub(Date deadlineTimeForTechBidsSub) {
		_deadlineTimeForTechBidsSub = deadlineTimeForTechBidsSub;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_columnBitmask = -1L;

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, GDFTenderDetails.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GDFTenderDetails toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, GDFTenderDetails>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GDFTenderDetailsImpl gdfTenderDetailsImpl = new GDFTenderDetailsImpl();

		gdfTenderDetailsImpl.setTenderRefID(getTenderRefID());
		gdfTenderDetailsImpl.setProductCategory(getProductCategory());
		gdfTenderDetailsImpl.setTenderReferenceNumber(
			getTenderReferenceNumber());
		gdfTenderDetailsImpl.setTitle(getTitle());
		gdfTenderDetailsImpl.setPublicationDate(getPublicationDate());
		gdfTenderDetailsImpl.setDeadlineForTechBidsSub(
			getDeadlineForTechBidsSub());
		gdfTenderDetailsImpl.setMethod(getMethod());
		gdfTenderDetailsImpl.setTenderStatus(getTenderStatus());
		gdfTenderDetailsImpl.setDeadlineTimeForTechBidsSub(
			getDeadlineTimeForTechBidsSub());
		gdfTenderDetailsImpl.setUserId(getUserId());
		gdfTenderDetailsImpl.setUserName(getUserName());
		gdfTenderDetailsImpl.setCreateDate(getCreateDate());
		gdfTenderDetailsImpl.setModifiedDate(getModifiedDate());

		gdfTenderDetailsImpl.resetOriginalValues();

		return gdfTenderDetailsImpl;
	}

	@Override
	public int compareTo(GDFTenderDetails gdfTenderDetails) {
		int value = 0;

		value = DateUtil.compareTo(
			getModifiedDate(), gdfTenderDetails.getModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GDFTenderDetails)) {
			return false;
		}

		GDFTenderDetails gdfTenderDetails = (GDFTenderDetails)obj;

		long primaryKey = gdfTenderDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		GDFTenderDetailsModelImpl gdfTenderDetailsModelImpl = this;

		gdfTenderDetailsModelImpl._originalTenderReferenceNumber =
			gdfTenderDetailsModelImpl._tenderReferenceNumber;

		gdfTenderDetailsModelImpl._originalUserId =
			gdfTenderDetailsModelImpl._userId;

		gdfTenderDetailsModelImpl._setOriginalUserId = false;

		gdfTenderDetailsModelImpl._setModifiedDate = false;

		gdfTenderDetailsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<GDFTenderDetails> toCacheModel() {
		GDFTenderDetailsCacheModel gdfTenderDetailsCacheModel =
			new GDFTenderDetailsCacheModel();

		gdfTenderDetailsCacheModel.tenderRefID = getTenderRefID();

		gdfTenderDetailsCacheModel.productCategory = getProductCategory();

		String productCategory = gdfTenderDetailsCacheModel.productCategory;

		if ((productCategory != null) && (productCategory.length() == 0)) {
			gdfTenderDetailsCacheModel.productCategory = null;
		}

		gdfTenderDetailsCacheModel.tenderReferenceNumber =
			getTenderReferenceNumber();

		String tenderReferenceNumber =
			gdfTenderDetailsCacheModel.tenderReferenceNumber;

		if ((tenderReferenceNumber != null) &&
			(tenderReferenceNumber.length() == 0)) {

			gdfTenderDetailsCacheModel.tenderReferenceNumber = null;
		}

		gdfTenderDetailsCacheModel.title = getTitle();

		String title = gdfTenderDetailsCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			gdfTenderDetailsCacheModel.title = null;
		}

		Date publicationDate = getPublicationDate();

		if (publicationDate != null) {
			gdfTenderDetailsCacheModel.publicationDate =
				publicationDate.getTime();
		}
		else {
			gdfTenderDetailsCacheModel.publicationDate = Long.MIN_VALUE;
		}

		Date deadlineForTechBidsSub = getDeadlineForTechBidsSub();

		if (deadlineForTechBidsSub != null) {
			gdfTenderDetailsCacheModel.deadlineForTechBidsSub =
				deadlineForTechBidsSub.getTime();
		}
		else {
			gdfTenderDetailsCacheModel.deadlineForTechBidsSub = Long.MIN_VALUE;
		}

		gdfTenderDetailsCacheModel.method = getMethod();

		String method = gdfTenderDetailsCacheModel.method;

		if ((method != null) && (method.length() == 0)) {
			gdfTenderDetailsCacheModel.method = null;
		}

		gdfTenderDetailsCacheModel.tenderStatus = getTenderStatus();

		String tenderStatus = gdfTenderDetailsCacheModel.tenderStatus;

		if ((tenderStatus != null) && (tenderStatus.length() == 0)) {
			gdfTenderDetailsCacheModel.tenderStatus = null;
		}

		Date deadlineTimeForTechBidsSub = getDeadlineTimeForTechBidsSub();

		if (deadlineTimeForTechBidsSub != null) {
			gdfTenderDetailsCacheModel.deadlineTimeForTechBidsSub =
				deadlineTimeForTechBidsSub.getTime();
		}
		else {
			gdfTenderDetailsCacheModel.deadlineTimeForTechBidsSub =
				Long.MIN_VALUE;
		}

		gdfTenderDetailsCacheModel.userId = getUserId();

		gdfTenderDetailsCacheModel.userName = getUserName();

		String userName = gdfTenderDetailsCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			gdfTenderDetailsCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			gdfTenderDetailsCacheModel.createDate = createDate.getTime();
		}
		else {
			gdfTenderDetailsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			gdfTenderDetailsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			gdfTenderDetailsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return gdfTenderDetailsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<GDFTenderDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<GDFTenderDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<GDFTenderDetails, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((GDFTenderDetails)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<GDFTenderDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<GDFTenderDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<GDFTenderDetails, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((GDFTenderDetails)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, GDFTenderDetails>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _tenderRefID;
	private String _productCategory;
	private String _tenderReferenceNumber;
	private String _originalTenderReferenceNumber;
	private String _title;
	private Date _publicationDate;
	private Date _deadlineForTechBidsSub;
	private String _method;
	private String _tenderStatus;
	private Date _deadlineTimeForTechBidsSub;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _columnBitmask;
	private GDFTenderDetails _escapedModel;

}