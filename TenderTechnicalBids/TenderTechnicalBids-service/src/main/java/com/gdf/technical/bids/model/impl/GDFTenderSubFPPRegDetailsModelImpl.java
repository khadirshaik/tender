/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.gdf.technical.bids.model.impl;

import com.gdf.technical.bids.model.GDFTenderSubFPPRegDetails;
import com.gdf.technical.bids.model.GDFTenderSubFPPRegDetailsModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the GDFTenderSubFPPRegDetails service. Represents a row in the &quot;PRT_GDFTender_SubFppReg_Det&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>GDFTenderSubFPPRegDetailsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GDFTenderSubFPPRegDetailsImpl}.
 * </p>
 *
 * @author KS61374
 * @see GDFTenderSubFPPRegDetailsImpl
 * @generated
 */
public class GDFTenderSubFPPRegDetailsModelImpl
	extends BaseModelImpl<GDFTenderSubFPPRegDetails>
	implements GDFTenderSubFPPRegDetailsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a gdf tender sub fpp reg details model instance should use the <code>GDFTenderSubFPPRegDetails</code> interface instead.
	 */
	public static final String TABLE_NAME = "PRT_GDFTender_SubFppReg_Det";

	public static final Object[][] TABLE_COLUMNS = {
		{"GDF_Tender_Reg_Ref_Id", Types.BIGINT},
		{"GDF_Tender_Schedule_Number", Types.BIGINT},
		{"GDF_Generic_Code", Types.VARCHAR},
		{"GDF_Tender_Reference_Number", Types.VARCHAR},
		{"listOf_Registration_Countries", Types.VARCHAR},
		{"FPP_Reg_Appr_Status", Types.VARCHAR},
		{"FPP_Reg_Accepted", Types.BOOLEAN},
		{"FPP_Registration_ID", Types.BIGINT},
		{"GDF_Tender_Item_Mat_Ref_Id", Types.BIGINT},
		{"GDF_Tender_Item_Ref_Id", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("GDF_Tender_Reg_Ref_Id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("GDF_Tender_Schedule_Number", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("GDF_Generic_Code", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("GDF_Tender_Reference_Number", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("listOf_Registration_Countries", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FPP_Reg_Appr_Status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FPP_Reg_Accepted", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("FPP_Registration_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("GDF_Tender_Item_Mat_Ref_Id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("GDF_Tender_Item_Ref_Id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table PRT_GDFTender_SubFppReg_Det (GDF_Tender_Reg_Ref_Id LONG not null primary key IDENTITY,GDF_Tender_Schedule_Number LONG,GDF_Generic_Code VARCHAR(100) null,GDF_Tender_Reference_Number VARCHAR(100) null,listOf_Registration_Countries VARCHAR(100) null,FPP_Reg_Appr_Status VARCHAR(100) null,FPP_Reg_Accepted BOOLEAN,FPP_Registration_ID LONG,GDF_Tender_Item_Mat_Ref_Id LONG,GDF_Tender_Item_Ref_Id LONG,userId LONG,userName VARCHAR(100) null,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table PRT_GDFTender_SubFppReg_Det";

	public static final String ORDER_BY_JPQL =
		" ORDER BY gdfTenderSubFPPRegDetails.tenderRegRefID ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY PRT_GDFTender_SubFppReg_Det.GDF_Tender_Reg_Ref_Id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long FPPREGISTRATIONID_COLUMN_BITMASK = 1L;

	public static final long GDFGENERICCODE_COLUMN_BITMASK = 2L;

	public static final long SCHEDULENUMBER_COLUMN_BITMASK = 4L;

	public static final long TENDERREFERENCENUMBER_COLUMN_BITMASK = 8L;

	public static final long TENDERREGREFID_COLUMN_BITMASK = 16L;

	public static final long USERID_COLUMN_BITMASK = 32L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public GDFTenderSubFPPRegDetailsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _tenderRegRefID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTenderRegRefID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _tenderRegRefID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GDFTenderSubFPPRegDetails.class;
	}

	@Override
	public String getModelClassName() {
		return GDFTenderSubFPPRegDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<GDFTenderSubFPPRegDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<GDFTenderSubFPPRegDetails, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<GDFTenderSubFPPRegDetails, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((GDFTenderSubFPPRegDetails)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<GDFTenderSubFPPRegDetails, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<GDFTenderSubFPPRegDetails, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(GDFTenderSubFPPRegDetails)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<GDFTenderSubFPPRegDetails, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<GDFTenderSubFPPRegDetails, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, GDFTenderSubFPPRegDetails>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			GDFTenderSubFPPRegDetails.class.getClassLoader(),
			GDFTenderSubFPPRegDetails.class, ModelWrapper.class);

		try {
			Constructor<GDFTenderSubFPPRegDetails> constructor =
				(Constructor<GDFTenderSubFPPRegDetails>)
					proxyClass.getConstructor(InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map
		<String, Function<GDFTenderSubFPPRegDetails, Object>>
			_attributeGetterFunctions;
	private static final Map
		<String, BiConsumer<GDFTenderSubFPPRegDetails, Object>>
			_attributeSetterBiConsumers;

	static {
		Map<String, Function<GDFTenderSubFPPRegDetails, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<GDFTenderSubFPPRegDetails, Object>>();
		Map<String, BiConsumer<GDFTenderSubFPPRegDetails, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<GDFTenderSubFPPRegDetails, ?>>();

		attributeGetterFunctions.put(
			"tenderRegRefID", GDFTenderSubFPPRegDetails::getTenderRegRefID);
		attributeSetterBiConsumers.put(
			"tenderRegRefID",
			(BiConsumer<GDFTenderSubFPPRegDetails, Long>)
				GDFTenderSubFPPRegDetails::setTenderRegRefID);
		attributeGetterFunctions.put(
			"scheduleNumber", GDFTenderSubFPPRegDetails::getScheduleNumber);
		attributeSetterBiConsumers.put(
			"scheduleNumber",
			(BiConsumer<GDFTenderSubFPPRegDetails, Long>)
				GDFTenderSubFPPRegDetails::setScheduleNumber);
		attributeGetterFunctions.put(
			"gdfGenericCode", GDFTenderSubFPPRegDetails::getGdfGenericCode);
		attributeSetterBiConsumers.put(
			"gdfGenericCode",
			(BiConsumer<GDFTenderSubFPPRegDetails, String>)
				GDFTenderSubFPPRegDetails::setGdfGenericCode);
		attributeGetterFunctions.put(
			"tenderReferenceNumber",
			GDFTenderSubFPPRegDetails::getTenderReferenceNumber);
		attributeSetterBiConsumers.put(
			"tenderReferenceNumber",
			(BiConsumer<GDFTenderSubFPPRegDetails, String>)
				GDFTenderSubFPPRegDetails::setTenderReferenceNumber);
		attributeGetterFunctions.put(
			"listOfRegCountries",
			GDFTenderSubFPPRegDetails::getListOfRegCountries);
		attributeSetterBiConsumers.put(
			"listOfRegCountries",
			(BiConsumer<GDFTenderSubFPPRegDetails, String>)
				GDFTenderSubFPPRegDetails::setListOfRegCountries);
		attributeGetterFunctions.put(
			"fppRegApprStatus", GDFTenderSubFPPRegDetails::getFppRegApprStatus);
		attributeSetterBiConsumers.put(
			"fppRegApprStatus",
			(BiConsumer<GDFTenderSubFPPRegDetails, String>)
				GDFTenderSubFPPRegDetails::setFppRegApprStatus);
		attributeGetterFunctions.put(
			"fppRegAccepted", GDFTenderSubFPPRegDetails::getFppRegAccepted);
		attributeSetterBiConsumers.put(
			"fppRegAccepted",
			(BiConsumer<GDFTenderSubFPPRegDetails, Boolean>)
				GDFTenderSubFPPRegDetails::setFppRegAccepted);
		attributeGetterFunctions.put(
			"fppRegistrationId",
			GDFTenderSubFPPRegDetails::getFppRegistrationId);
		attributeSetterBiConsumers.put(
			"fppRegistrationId",
			(BiConsumer<GDFTenderSubFPPRegDetails, Long>)
				GDFTenderSubFPPRegDetails::setFppRegistrationId);
		attributeGetterFunctions.put(
			"tenderItemMatRefID",
			GDFTenderSubFPPRegDetails::getTenderItemMatRefID);
		attributeSetterBiConsumers.put(
			"tenderItemMatRefID",
			(BiConsumer<GDFTenderSubFPPRegDetails, Long>)
				GDFTenderSubFPPRegDetails::setTenderItemMatRefID);
		attributeGetterFunctions.put(
			"tenderItemRefID", GDFTenderSubFPPRegDetails::getTenderItemRefID);
		attributeSetterBiConsumers.put(
			"tenderItemRefID",
			(BiConsumer<GDFTenderSubFPPRegDetails, Long>)
				GDFTenderSubFPPRegDetails::setTenderItemRefID);
		attributeGetterFunctions.put(
			"userId", GDFTenderSubFPPRegDetails::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<GDFTenderSubFPPRegDetails, Long>)
				GDFTenderSubFPPRegDetails::setUserId);
		attributeGetterFunctions.put(
			"userName", GDFTenderSubFPPRegDetails::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<GDFTenderSubFPPRegDetails, String>)
				GDFTenderSubFPPRegDetails::setUserName);
		attributeGetterFunctions.put(
			"createDate", GDFTenderSubFPPRegDetails::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<GDFTenderSubFPPRegDetails, Date>)
				GDFTenderSubFPPRegDetails::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", GDFTenderSubFPPRegDetails::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<GDFTenderSubFPPRegDetails, Date>)
				GDFTenderSubFPPRegDetails::setModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getTenderRegRefID() {
		return _tenderRegRefID;
	}

	@Override
	public void setTenderRegRefID(long tenderRegRefID) {
		_columnBitmask |= TENDERREGREFID_COLUMN_BITMASK;

		if (!_setOriginalTenderRegRefID) {
			_setOriginalTenderRegRefID = true;

			_originalTenderRegRefID = _tenderRegRefID;
		}

		_tenderRegRefID = tenderRegRefID;
	}

	public long getOriginalTenderRegRefID() {
		return _originalTenderRegRefID;
	}

	@Override
	public long getScheduleNumber() {
		return _scheduleNumber;
	}

	@Override
	public void setScheduleNumber(long scheduleNumber) {
		_columnBitmask |= SCHEDULENUMBER_COLUMN_BITMASK;

		if (!_setOriginalScheduleNumber) {
			_setOriginalScheduleNumber = true;

			_originalScheduleNumber = _scheduleNumber;
		}

		_scheduleNumber = scheduleNumber;
	}

	public long getOriginalScheduleNumber() {
		return _originalScheduleNumber;
	}

	@Override
	public String getGdfGenericCode() {
		if (_gdfGenericCode == null) {
			return "";
		}
		else {
			return _gdfGenericCode;
		}
	}

	@Override
	public void setGdfGenericCode(String gdfGenericCode) {
		_columnBitmask |= GDFGENERICCODE_COLUMN_BITMASK;

		if (_originalGdfGenericCode == null) {
			_originalGdfGenericCode = _gdfGenericCode;
		}

		_gdfGenericCode = gdfGenericCode;
	}

	public String getOriginalGdfGenericCode() {
		return GetterUtil.getString(_originalGdfGenericCode);
	}

	@Override
	public String getTenderReferenceNumber() {
		if (_tenderReferenceNumber == null) {
			return "";
		}
		else {
			return _tenderReferenceNumber;
		}
	}

	@Override
	public void setTenderReferenceNumber(String tenderReferenceNumber) {
		_columnBitmask |= TENDERREFERENCENUMBER_COLUMN_BITMASK;

		if (_originalTenderReferenceNumber == null) {
			_originalTenderReferenceNumber = _tenderReferenceNumber;
		}

		_tenderReferenceNumber = tenderReferenceNumber;
	}

	public String getOriginalTenderReferenceNumber() {
		return GetterUtil.getString(_originalTenderReferenceNumber);
	}

	@Override
	public String getListOfRegCountries() {
		if (_listOfRegCountries == null) {
			return "";
		}
		else {
			return _listOfRegCountries;
		}
	}

	@Override
	public void setListOfRegCountries(String listOfRegCountries) {
		_listOfRegCountries = listOfRegCountries;
	}

	@Override
	public String getFppRegApprStatus() {
		if (_fppRegApprStatus == null) {
			return "";
		}
		else {
			return _fppRegApprStatus;
		}
	}

	@Override
	public void setFppRegApprStatus(String fppRegApprStatus) {
		_fppRegApprStatus = fppRegApprStatus;
	}

	@Override
	public boolean getFppRegAccepted() {
		return _fppRegAccepted;
	}

	@Override
	public boolean isFppRegAccepted() {
		return _fppRegAccepted;
	}

	@Override
	public void setFppRegAccepted(boolean fppRegAccepted) {
		_fppRegAccepted = fppRegAccepted;
	}

	@Override
	public long getFppRegistrationId() {
		return _fppRegistrationId;
	}

	@Override
	public void setFppRegistrationId(long fppRegistrationId) {
		_columnBitmask |= FPPREGISTRATIONID_COLUMN_BITMASK;

		if (!_setOriginalFppRegistrationId) {
			_setOriginalFppRegistrationId = true;

			_originalFppRegistrationId = _fppRegistrationId;
		}

		_fppRegistrationId = fppRegistrationId;
	}

	public long getOriginalFppRegistrationId() {
		return _originalFppRegistrationId;
	}

	@Override
	public long getTenderItemMatRefID() {
		return _tenderItemMatRefID;
	}

	@Override
	public void setTenderItemMatRefID(long tenderItemMatRefID) {
		_tenderItemMatRefID = tenderItemMatRefID;
	}

	@Override
	public long getTenderItemRefID() {
		return _tenderItemRefID;
	}

	@Override
	public void setTenderItemRefID(long tenderItemRefID) {
		_tenderItemRefID = tenderItemRefID;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, GDFTenderSubFPPRegDetails.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GDFTenderSubFPPRegDetails toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, GDFTenderSubFPPRegDetails>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GDFTenderSubFPPRegDetailsImpl gdfTenderSubFPPRegDetailsImpl =
			new GDFTenderSubFPPRegDetailsImpl();

		gdfTenderSubFPPRegDetailsImpl.setTenderRegRefID(getTenderRegRefID());
		gdfTenderSubFPPRegDetailsImpl.setScheduleNumber(getScheduleNumber());
		gdfTenderSubFPPRegDetailsImpl.setGdfGenericCode(getGdfGenericCode());
		gdfTenderSubFPPRegDetailsImpl.setTenderReferenceNumber(
			getTenderReferenceNumber());
		gdfTenderSubFPPRegDetailsImpl.setListOfRegCountries(
			getListOfRegCountries());
		gdfTenderSubFPPRegDetailsImpl.setFppRegApprStatus(
			getFppRegApprStatus());
		gdfTenderSubFPPRegDetailsImpl.setFppRegAccepted(isFppRegAccepted());
		gdfTenderSubFPPRegDetailsImpl.setFppRegistrationId(
			getFppRegistrationId());
		gdfTenderSubFPPRegDetailsImpl.setTenderItemMatRefID(
			getTenderItemMatRefID());
		gdfTenderSubFPPRegDetailsImpl.setTenderItemRefID(getTenderItemRefID());
		gdfTenderSubFPPRegDetailsImpl.setUserId(getUserId());
		gdfTenderSubFPPRegDetailsImpl.setUserName(getUserName());
		gdfTenderSubFPPRegDetailsImpl.setCreateDate(getCreateDate());
		gdfTenderSubFPPRegDetailsImpl.setModifiedDate(getModifiedDate());

		gdfTenderSubFPPRegDetailsImpl.resetOriginalValues();

		return gdfTenderSubFPPRegDetailsImpl;
	}

	@Override
	public int compareTo(GDFTenderSubFPPRegDetails gdfTenderSubFPPRegDetails) {
		long primaryKey = gdfTenderSubFPPRegDetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GDFTenderSubFPPRegDetails)) {
			return false;
		}

		GDFTenderSubFPPRegDetails gdfTenderSubFPPRegDetails =
			(GDFTenderSubFPPRegDetails)obj;

		long primaryKey = gdfTenderSubFPPRegDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		GDFTenderSubFPPRegDetailsModelImpl gdfTenderSubFPPRegDetailsModelImpl =
			this;

		gdfTenderSubFPPRegDetailsModelImpl._originalTenderRegRefID =
			gdfTenderSubFPPRegDetailsModelImpl._tenderRegRefID;

		gdfTenderSubFPPRegDetailsModelImpl._setOriginalTenderRegRefID = false;

		gdfTenderSubFPPRegDetailsModelImpl._originalScheduleNumber =
			gdfTenderSubFPPRegDetailsModelImpl._scheduleNumber;

		gdfTenderSubFPPRegDetailsModelImpl._setOriginalScheduleNumber = false;

		gdfTenderSubFPPRegDetailsModelImpl._originalGdfGenericCode =
			gdfTenderSubFPPRegDetailsModelImpl._gdfGenericCode;

		gdfTenderSubFPPRegDetailsModelImpl._originalTenderReferenceNumber =
			gdfTenderSubFPPRegDetailsModelImpl._tenderReferenceNumber;

		gdfTenderSubFPPRegDetailsModelImpl._originalFppRegistrationId =
			gdfTenderSubFPPRegDetailsModelImpl._fppRegistrationId;

		gdfTenderSubFPPRegDetailsModelImpl._setOriginalFppRegistrationId =
			false;

		gdfTenderSubFPPRegDetailsModelImpl._originalUserId =
			gdfTenderSubFPPRegDetailsModelImpl._userId;

		gdfTenderSubFPPRegDetailsModelImpl._setOriginalUserId = false;

		gdfTenderSubFPPRegDetailsModelImpl._setModifiedDate = false;

		gdfTenderSubFPPRegDetailsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<GDFTenderSubFPPRegDetails> toCacheModel() {
		GDFTenderSubFPPRegDetailsCacheModel
			gdfTenderSubFPPRegDetailsCacheModel =
				new GDFTenderSubFPPRegDetailsCacheModel();

		gdfTenderSubFPPRegDetailsCacheModel.tenderRegRefID =
			getTenderRegRefID();

		gdfTenderSubFPPRegDetailsCacheModel.scheduleNumber =
			getScheduleNumber();

		gdfTenderSubFPPRegDetailsCacheModel.gdfGenericCode =
			getGdfGenericCode();

		String gdfGenericCode =
			gdfTenderSubFPPRegDetailsCacheModel.gdfGenericCode;

		if ((gdfGenericCode != null) && (gdfGenericCode.length() == 0)) {
			gdfTenderSubFPPRegDetailsCacheModel.gdfGenericCode = null;
		}

		gdfTenderSubFPPRegDetailsCacheModel.tenderReferenceNumber =
			getTenderReferenceNumber();

		String tenderReferenceNumber =
			gdfTenderSubFPPRegDetailsCacheModel.tenderReferenceNumber;

		if ((tenderReferenceNumber != null) &&
			(tenderReferenceNumber.length() == 0)) {

			gdfTenderSubFPPRegDetailsCacheModel.tenderReferenceNumber = null;
		}

		gdfTenderSubFPPRegDetailsCacheModel.listOfRegCountries =
			getListOfRegCountries();

		String listOfRegCountries =
			gdfTenderSubFPPRegDetailsCacheModel.listOfRegCountries;

		if ((listOfRegCountries != null) &&
			(listOfRegCountries.length() == 0)) {

			gdfTenderSubFPPRegDetailsCacheModel.listOfRegCountries = null;
		}

		gdfTenderSubFPPRegDetailsCacheModel.fppRegApprStatus =
			getFppRegApprStatus();

		String fppRegApprStatus =
			gdfTenderSubFPPRegDetailsCacheModel.fppRegApprStatus;

		if ((fppRegApprStatus != null) && (fppRegApprStatus.length() == 0)) {
			gdfTenderSubFPPRegDetailsCacheModel.fppRegApprStatus = null;
		}

		gdfTenderSubFPPRegDetailsCacheModel.fppRegAccepted = isFppRegAccepted();

		gdfTenderSubFPPRegDetailsCacheModel.fppRegistrationId =
			getFppRegistrationId();

		gdfTenderSubFPPRegDetailsCacheModel.tenderItemMatRefID =
			getTenderItemMatRefID();

		gdfTenderSubFPPRegDetailsCacheModel.tenderItemRefID =
			getTenderItemRefID();

		gdfTenderSubFPPRegDetailsCacheModel.userId = getUserId();

		gdfTenderSubFPPRegDetailsCacheModel.userName = getUserName();

		String userName = gdfTenderSubFPPRegDetailsCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			gdfTenderSubFPPRegDetailsCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			gdfTenderSubFPPRegDetailsCacheModel.createDate =
				createDate.getTime();
		}
		else {
			gdfTenderSubFPPRegDetailsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			gdfTenderSubFPPRegDetailsCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			gdfTenderSubFPPRegDetailsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return gdfTenderSubFPPRegDetailsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<GDFTenderSubFPPRegDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<GDFTenderSubFPPRegDetails, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<GDFTenderSubFPPRegDetails, Object>
				attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((GDFTenderSubFPPRegDetails)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<GDFTenderSubFPPRegDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<GDFTenderSubFPPRegDetails, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<GDFTenderSubFPPRegDetails, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((GDFTenderSubFPPRegDetails)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, GDFTenderSubFPPRegDetails>
				_escapedModelProxyProviderFunction =
					_getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _tenderRegRefID;
	private long _originalTenderRegRefID;
	private boolean _setOriginalTenderRegRefID;
	private long _scheduleNumber;
	private long _originalScheduleNumber;
	private boolean _setOriginalScheduleNumber;
	private String _gdfGenericCode;
	private String _originalGdfGenericCode;
	private String _tenderReferenceNumber;
	private String _originalTenderReferenceNumber;
	private String _listOfRegCountries;
	private String _fppRegApprStatus;
	private boolean _fppRegAccepted;
	private long _fppRegistrationId;
	private long _originalFppRegistrationId;
	private boolean _setOriginalFppRegistrationId;
	private long _tenderItemMatRefID;
	private long _tenderItemRefID;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _columnBitmask;
	private GDFTenderSubFPPRegDetails _escapedModel;

}