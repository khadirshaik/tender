/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.gdf.technical.bids.model.impl;

import com.gdf.technical.bids.model.GDFTenderSubmissionDetails;
import com.gdf.technical.bids.model.GDFTenderSubmissionDetailsModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the GDFTenderSubmissionDetails service. Represents a row in the &quot;PRT_GDFTender_Subm_Details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>GDFTenderSubmissionDetailsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GDFTenderSubmissionDetailsImpl}.
 * </p>
 *
 * @author KS61374
 * @see GDFTenderSubmissionDetailsImpl
 * @generated
 */
public class GDFTenderSubmissionDetailsModelImpl
	extends BaseModelImpl<GDFTenderSubmissionDetails>
	implements GDFTenderSubmissionDetailsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a gdf tender submission details model instance should use the <code>GDFTenderSubmissionDetails</code> interface instead.
	 */
	public static final String TABLE_NAME = "PRT_GDFTender_Subm_Details";

	public static final Object[][] TABLE_COLUMNS = {
		{"GDF_Tender_Sub_Ref_Id", Types.BIGINT},
		{"GDF_Tender_Reference_Number", Types.VARCHAR},
		{"Copy_Of_Reg_Cert", Types.VARCHAR}, {"Supplier_Name", Types.VARCHAR},
		{"Name_Of_Auth_Repr", Types.VARCHAR}, {"Supplier_Title", Types.VARCHAR},
		{"Supplier_Email_Address", Types.VARCHAR},
		{"Supplier_Telephone_Number", Types.VARCHAR},
		{"Submission_Status", Types.VARCHAR}, {"supplierId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"submittedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("GDF_Tender_Sub_Ref_Id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("GDF_Tender_Reference_Number", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Copy_Of_Reg_Cert", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Supplier_Name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Name_Of_Auth_Repr", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Supplier_Title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Supplier_Email_Address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Supplier_Telephone_Number", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Submission_Status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("supplierId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("submittedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table PRT_GDFTender_Subm_Details (GDF_Tender_Sub_Ref_Id LONG not null primary key IDENTITY,GDF_Tender_Reference_Number VARCHAR(100) null,Copy_Of_Reg_Cert VARCHAR(1000) null,Supplier_Name VARCHAR(100) null,Name_Of_Auth_Repr VARCHAR(100) null,Supplier_Title VARCHAR(100) null,Supplier_Email_Address VARCHAR(100) null,Supplier_Telephone_Number VARCHAR(100) null,Submission_Status VARCHAR(100) null,supplierId LONG,userName VARCHAR(100) null,createDate DATE null,modifiedDate DATE null,submittedDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table PRT_GDFTender_Subm_Details";

	public static final String ORDER_BY_JPQL =
		" ORDER BY gdfTenderSubmissionDetails.modifiedDate DESC, gdfTenderSubmissionDetails.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY PRT_GDFTender_Subm_Details.modifiedDate DESC, PRT_GDFTender_Subm_Details.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long SUPPLIERID_COLUMN_BITMASK = 1L;

	public static final long TENDERREFERENCENUMBER_COLUMN_BITMASK = 2L;

	public static final long MODIFIEDDATE_COLUMN_BITMASK = 4L;

	public static final long CREATEDATE_COLUMN_BITMASK = 8L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public GDFTenderSubmissionDetailsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _tenderSubRefID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTenderSubRefID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _tenderSubRefID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GDFTenderSubmissionDetails.class;
	}

	@Override
	public String getModelClassName() {
		return GDFTenderSubmissionDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<GDFTenderSubmissionDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<GDFTenderSubmissionDetails, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<GDFTenderSubmissionDetails, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(GDFTenderSubmissionDetails)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<GDFTenderSubmissionDetails, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<GDFTenderSubmissionDetails, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(GDFTenderSubmissionDetails)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<GDFTenderSubmissionDetails, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<GDFTenderSubmissionDetails, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, GDFTenderSubmissionDetails>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			GDFTenderSubmissionDetails.class.getClassLoader(),
			GDFTenderSubmissionDetails.class, ModelWrapper.class);

		try {
			Constructor<GDFTenderSubmissionDetails> constructor =
				(Constructor<GDFTenderSubmissionDetails>)
					proxyClass.getConstructor(InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map
		<String, Function<GDFTenderSubmissionDetails, Object>>
			_attributeGetterFunctions;
	private static final Map
		<String, BiConsumer<GDFTenderSubmissionDetails, Object>>
			_attributeSetterBiConsumers;

	static {
		Map<String, Function<GDFTenderSubmissionDetails, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<GDFTenderSubmissionDetails, Object>>();
		Map<String, BiConsumer<GDFTenderSubmissionDetails, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<GDFTenderSubmissionDetails, ?>>();

		attributeGetterFunctions.put(
			"tenderSubRefID", GDFTenderSubmissionDetails::getTenderSubRefID);
		attributeSetterBiConsumers.put(
			"tenderSubRefID",
			(BiConsumer<GDFTenderSubmissionDetails, Long>)
				GDFTenderSubmissionDetails::setTenderSubRefID);
		attributeGetterFunctions.put(
			"tenderReferenceNumber",
			GDFTenderSubmissionDetails::getTenderReferenceNumber);
		attributeSetterBiConsumers.put(
			"tenderReferenceNumber",
			(BiConsumer<GDFTenderSubmissionDetails, String>)
				GDFTenderSubmissionDetails::setTenderReferenceNumber);
		attributeGetterFunctions.put(
			"copyOfRegCert", GDFTenderSubmissionDetails::getCopyOfRegCert);
		attributeSetterBiConsumers.put(
			"copyOfRegCert",
			(BiConsumer<GDFTenderSubmissionDetails, String>)
				GDFTenderSubmissionDetails::setCopyOfRegCert);
		attributeGetterFunctions.put(
			"supplierName", GDFTenderSubmissionDetails::getSupplierName);
		attributeSetterBiConsumers.put(
			"supplierName",
			(BiConsumer<GDFTenderSubmissionDetails, String>)
				GDFTenderSubmissionDetails::setSupplierName);
		attributeGetterFunctions.put(
			"nameOfAuthRepr", GDFTenderSubmissionDetails::getNameOfAuthRepr);
		attributeSetterBiConsumers.put(
			"nameOfAuthRepr",
			(BiConsumer<GDFTenderSubmissionDetails, String>)
				GDFTenderSubmissionDetails::setNameOfAuthRepr);
		attributeGetterFunctions.put(
			"supplierTitle", GDFTenderSubmissionDetails::getSupplierTitle);
		attributeSetterBiConsumers.put(
			"supplierTitle",
			(BiConsumer<GDFTenderSubmissionDetails, String>)
				GDFTenderSubmissionDetails::setSupplierTitle);
		attributeGetterFunctions.put(
			"supplierEmailAddress",
			GDFTenderSubmissionDetails::getSupplierEmailAddress);
		attributeSetterBiConsumers.put(
			"supplierEmailAddress",
			(BiConsumer<GDFTenderSubmissionDetails, String>)
				GDFTenderSubmissionDetails::setSupplierEmailAddress);
		attributeGetterFunctions.put(
			"supplierTelephoneNumber",
			GDFTenderSubmissionDetails::getSupplierTelephoneNumber);
		attributeSetterBiConsumers.put(
			"supplierTelephoneNumber",
			(BiConsumer<GDFTenderSubmissionDetails, String>)
				GDFTenderSubmissionDetails::setSupplierTelephoneNumber);
		attributeGetterFunctions.put(
			"tenderSubmissionStatus",
			GDFTenderSubmissionDetails::getTenderSubmissionStatus);
		attributeSetterBiConsumers.put(
			"tenderSubmissionStatus",
			(BiConsumer<GDFTenderSubmissionDetails, String>)
				GDFTenderSubmissionDetails::setTenderSubmissionStatus);
		attributeGetterFunctions.put(
			"supplierId", GDFTenderSubmissionDetails::getSupplierId);
		attributeSetterBiConsumers.put(
			"supplierId",
			(BiConsumer<GDFTenderSubmissionDetails, Long>)
				GDFTenderSubmissionDetails::setSupplierId);
		attributeGetterFunctions.put(
			"userName", GDFTenderSubmissionDetails::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<GDFTenderSubmissionDetails, String>)
				GDFTenderSubmissionDetails::setUserName);
		attributeGetterFunctions.put(
			"createDate", GDFTenderSubmissionDetails::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<GDFTenderSubmissionDetails, Date>)
				GDFTenderSubmissionDetails::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", GDFTenderSubmissionDetails::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<GDFTenderSubmissionDetails, Date>)
				GDFTenderSubmissionDetails::setModifiedDate);
		attributeGetterFunctions.put(
			"submittedDate", GDFTenderSubmissionDetails::getSubmittedDate);
		attributeSetterBiConsumers.put(
			"submittedDate",
			(BiConsumer<GDFTenderSubmissionDetails, Date>)
				GDFTenderSubmissionDetails::setSubmittedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getTenderSubRefID() {
		return _tenderSubRefID;
	}

	@Override
	public void setTenderSubRefID(long tenderSubRefID) {
		_tenderSubRefID = tenderSubRefID;
	}

	@Override
	public String getTenderReferenceNumber() {
		if (_tenderReferenceNumber == null) {
			return "";
		}
		else {
			return _tenderReferenceNumber;
		}
	}

	@Override
	public void setTenderReferenceNumber(String tenderReferenceNumber) {
		_columnBitmask |= TENDERREFERENCENUMBER_COLUMN_BITMASK;

		if (_originalTenderReferenceNumber == null) {
			_originalTenderReferenceNumber = _tenderReferenceNumber;
		}

		_tenderReferenceNumber = tenderReferenceNumber;
	}

	public String getOriginalTenderReferenceNumber() {
		return GetterUtil.getString(_originalTenderReferenceNumber);
	}

	@Override
	public String getCopyOfRegCert() {
		if (_copyOfRegCert == null) {
			return "";
		}
		else {
			return _copyOfRegCert;
		}
	}

	@Override
	public void setCopyOfRegCert(String copyOfRegCert) {
		_copyOfRegCert = copyOfRegCert;
	}

	@Override
	public String getSupplierName() {
		if (_supplierName == null) {
			return "";
		}
		else {
			return _supplierName;
		}
	}

	@Override
	public void setSupplierName(String supplierName) {
		_supplierName = supplierName;
	}

	@Override
	public String getNameOfAuthRepr() {
		if (_nameOfAuthRepr == null) {
			return "";
		}
		else {
			return _nameOfAuthRepr;
		}
	}

	@Override
	public void setNameOfAuthRepr(String nameOfAuthRepr) {
		_nameOfAuthRepr = nameOfAuthRepr;
	}

	@Override
	public String getSupplierTitle() {
		if (_supplierTitle == null) {
			return "";
		}
		else {
			return _supplierTitle;
		}
	}

	@Override
	public void setSupplierTitle(String supplierTitle) {
		_supplierTitle = supplierTitle;
	}

	@Override
	public String getSupplierEmailAddress() {
		if (_supplierEmailAddress == null) {
			return "";
		}
		else {
			return _supplierEmailAddress;
		}
	}

	@Override
	public void setSupplierEmailAddress(String supplierEmailAddress) {
		_supplierEmailAddress = supplierEmailAddress;
	}

	@Override
	public String getSupplierTelephoneNumber() {
		if (_supplierTelephoneNumber == null) {
			return "";
		}
		else {
			return _supplierTelephoneNumber;
		}
	}

	@Override
	public void setSupplierTelephoneNumber(String supplierTelephoneNumber) {
		_supplierTelephoneNumber = supplierTelephoneNumber;
	}

	@Override
	public String getTenderSubmissionStatus() {
		if (_tenderSubmissionStatus == null) {
			return "";
		}
		else {
			return _tenderSubmissionStatus;
		}
	}

	@Override
	public void setTenderSubmissionStatus(String tenderSubmissionStatus) {
		_tenderSubmissionStatus = tenderSubmissionStatus;
	}

	@Override
	public long getSupplierId() {
		return _supplierId;
	}

	@Override
	public void setSupplierId(long supplierId) {
		_columnBitmask |= SUPPLIERID_COLUMN_BITMASK;

		if (!_setOriginalSupplierId) {
			_setOriginalSupplierId = true;

			_originalSupplierId = _supplierId;
		}

		_supplierId = supplierId;
	}

	public long getOriginalSupplierId() {
		return _originalSupplierId;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_columnBitmask = -1L;

		_modifiedDate = modifiedDate;
	}

	@Override
	public Date getSubmittedDate() {
		return _submittedDate;
	}

	@Override
	public void setSubmittedDate(Date submittedDate) {
		_submittedDate = submittedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, GDFTenderSubmissionDetails.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GDFTenderSubmissionDetails toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, GDFTenderSubmissionDetails>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GDFTenderSubmissionDetailsImpl gdfTenderSubmissionDetailsImpl =
			new GDFTenderSubmissionDetailsImpl();

		gdfTenderSubmissionDetailsImpl.setTenderSubRefID(getTenderSubRefID());
		gdfTenderSubmissionDetailsImpl.setTenderReferenceNumber(
			getTenderReferenceNumber());
		gdfTenderSubmissionDetailsImpl.setCopyOfRegCert(getCopyOfRegCert());
		gdfTenderSubmissionDetailsImpl.setSupplierName(getSupplierName());
		gdfTenderSubmissionDetailsImpl.setNameOfAuthRepr(getNameOfAuthRepr());
		gdfTenderSubmissionDetailsImpl.setSupplierTitle(getSupplierTitle());
		gdfTenderSubmissionDetailsImpl.setSupplierEmailAddress(
			getSupplierEmailAddress());
		gdfTenderSubmissionDetailsImpl.setSupplierTelephoneNumber(
			getSupplierTelephoneNumber());
		gdfTenderSubmissionDetailsImpl.setTenderSubmissionStatus(
			getTenderSubmissionStatus());
		gdfTenderSubmissionDetailsImpl.setSupplierId(getSupplierId());
		gdfTenderSubmissionDetailsImpl.setUserName(getUserName());
		gdfTenderSubmissionDetailsImpl.setCreateDate(getCreateDate());
		gdfTenderSubmissionDetailsImpl.setModifiedDate(getModifiedDate());
		gdfTenderSubmissionDetailsImpl.setSubmittedDate(getSubmittedDate());

		gdfTenderSubmissionDetailsImpl.resetOriginalValues();

		return gdfTenderSubmissionDetailsImpl;
	}

	@Override
	public int compareTo(
		GDFTenderSubmissionDetails gdfTenderSubmissionDetails) {

		int value = 0;

		value = DateUtil.compareTo(
			getModifiedDate(), gdfTenderSubmissionDetails.getModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		value = DateUtil.compareTo(
			getCreateDate(), gdfTenderSubmissionDetails.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GDFTenderSubmissionDetails)) {
			return false;
		}

		GDFTenderSubmissionDetails gdfTenderSubmissionDetails =
			(GDFTenderSubmissionDetails)obj;

		long primaryKey = gdfTenderSubmissionDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		GDFTenderSubmissionDetailsModelImpl
			gdfTenderSubmissionDetailsModelImpl = this;

		gdfTenderSubmissionDetailsModelImpl._originalTenderReferenceNumber =
			gdfTenderSubmissionDetailsModelImpl._tenderReferenceNumber;

		gdfTenderSubmissionDetailsModelImpl._originalSupplierId =
			gdfTenderSubmissionDetailsModelImpl._supplierId;

		gdfTenderSubmissionDetailsModelImpl._setOriginalSupplierId = false;

		gdfTenderSubmissionDetailsModelImpl._setModifiedDate = false;

		gdfTenderSubmissionDetailsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<GDFTenderSubmissionDetails> toCacheModel() {
		GDFTenderSubmissionDetailsCacheModel
			gdfTenderSubmissionDetailsCacheModel =
				new GDFTenderSubmissionDetailsCacheModel();

		gdfTenderSubmissionDetailsCacheModel.tenderSubRefID =
			getTenderSubRefID();

		gdfTenderSubmissionDetailsCacheModel.tenderReferenceNumber =
			getTenderReferenceNumber();

		String tenderReferenceNumber =
			gdfTenderSubmissionDetailsCacheModel.tenderReferenceNumber;

		if ((tenderReferenceNumber != null) &&
			(tenderReferenceNumber.length() == 0)) {

			gdfTenderSubmissionDetailsCacheModel.tenderReferenceNumber = null;
		}

		gdfTenderSubmissionDetailsCacheModel.copyOfRegCert = getCopyOfRegCert();

		String copyOfRegCert =
			gdfTenderSubmissionDetailsCacheModel.copyOfRegCert;

		if ((copyOfRegCert != null) && (copyOfRegCert.length() == 0)) {
			gdfTenderSubmissionDetailsCacheModel.copyOfRegCert = null;
		}

		gdfTenderSubmissionDetailsCacheModel.supplierName = getSupplierName();

		String supplierName = gdfTenderSubmissionDetailsCacheModel.supplierName;

		if ((supplierName != null) && (supplierName.length() == 0)) {
			gdfTenderSubmissionDetailsCacheModel.supplierName = null;
		}

		gdfTenderSubmissionDetailsCacheModel.nameOfAuthRepr =
			getNameOfAuthRepr();

		String nameOfAuthRepr =
			gdfTenderSubmissionDetailsCacheModel.nameOfAuthRepr;

		if ((nameOfAuthRepr != null) && (nameOfAuthRepr.length() == 0)) {
			gdfTenderSubmissionDetailsCacheModel.nameOfAuthRepr = null;
		}

		gdfTenderSubmissionDetailsCacheModel.supplierTitle = getSupplierTitle();

		String supplierTitle =
			gdfTenderSubmissionDetailsCacheModel.supplierTitle;

		if ((supplierTitle != null) && (supplierTitle.length() == 0)) {
			gdfTenderSubmissionDetailsCacheModel.supplierTitle = null;
		}

		gdfTenderSubmissionDetailsCacheModel.supplierEmailAddress =
			getSupplierEmailAddress();

		String supplierEmailAddress =
			gdfTenderSubmissionDetailsCacheModel.supplierEmailAddress;

		if ((supplierEmailAddress != null) &&
			(supplierEmailAddress.length() == 0)) {

			gdfTenderSubmissionDetailsCacheModel.supplierEmailAddress = null;
		}

		gdfTenderSubmissionDetailsCacheModel.supplierTelephoneNumber =
			getSupplierTelephoneNumber();

		String supplierTelephoneNumber =
			gdfTenderSubmissionDetailsCacheModel.supplierTelephoneNumber;

		if ((supplierTelephoneNumber != null) &&
			(supplierTelephoneNumber.length() == 0)) {

			gdfTenderSubmissionDetailsCacheModel.supplierTelephoneNumber = null;
		}

		gdfTenderSubmissionDetailsCacheModel.tenderSubmissionStatus =
			getTenderSubmissionStatus();

		String tenderSubmissionStatus =
			gdfTenderSubmissionDetailsCacheModel.tenderSubmissionStatus;

		if ((tenderSubmissionStatus != null) &&
			(tenderSubmissionStatus.length() == 0)) {

			gdfTenderSubmissionDetailsCacheModel.tenderSubmissionStatus = null;
		}

		gdfTenderSubmissionDetailsCacheModel.supplierId = getSupplierId();

		gdfTenderSubmissionDetailsCacheModel.userName = getUserName();

		String userName = gdfTenderSubmissionDetailsCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			gdfTenderSubmissionDetailsCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			gdfTenderSubmissionDetailsCacheModel.createDate =
				createDate.getTime();
		}
		else {
			gdfTenderSubmissionDetailsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			gdfTenderSubmissionDetailsCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			gdfTenderSubmissionDetailsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date submittedDate = getSubmittedDate();

		if (submittedDate != null) {
			gdfTenderSubmissionDetailsCacheModel.submittedDate =
				submittedDate.getTime();
		}
		else {
			gdfTenderSubmissionDetailsCacheModel.submittedDate = Long.MIN_VALUE;
		}

		return gdfTenderSubmissionDetailsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<GDFTenderSubmissionDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<GDFTenderSubmissionDetails, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<GDFTenderSubmissionDetails, Object>
				attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply(
					(GDFTenderSubmissionDetails)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<GDFTenderSubmissionDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<GDFTenderSubmissionDetails, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<GDFTenderSubmissionDetails, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply(
					(GDFTenderSubmissionDetails)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, GDFTenderSubmissionDetails>
				_escapedModelProxyProviderFunction =
					_getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _tenderSubRefID;
	private String _tenderReferenceNumber;
	private String _originalTenderReferenceNumber;
	private String _copyOfRegCert;
	private String _supplierName;
	private String _nameOfAuthRepr;
	private String _supplierTitle;
	private String _supplierEmailAddress;
	private String _supplierTelephoneNumber;
	private String _tenderSubmissionStatus;
	private long _supplierId;
	private long _originalSupplierId;
	private boolean _setOriginalSupplierId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private Date _submittedDate;
	private long _columnBitmask;
	private GDFTenderSubmissionDetails _escapedModel;

}